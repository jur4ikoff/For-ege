from functools import lru_cache


def task(h):
    s, k = h
    if k == 0:
        return (s + 1, 1), (s + 2, 2), (s * 2, 3)
    if k == 1:
        return (s + 2, 2), (s * 2, 3)
    if k == 2:
        return (s + 1, 1), (s * 2, 3)
    if k == 3:
        return (s + 1, 1), (s + 2, 2)



@lru_cache(None)
def game(h):
    s, k = h
    if s >= 100:
        return 'W'

    if any(game(move) == 'W' for move in task(h)):  # первый петя
        return 'P1'

    if all(game(move) == 'P1' for move in task(h)):  # первый ваня
        return 'B1'

    if any(game(move) == 'B1' for move in task(h)):  # второй петя
        return 'P2'

    if all(game(move) == 'P1' or game(move) == 'P2' for move in task(s)):  # второй ваня
        return 'B2'


for i in range(1, 101):
    h = (i, 0)
    print(i, game(h))
